Recursive CTE

```
CREATE TABLE people (id integer, name varchar, parent_id integer);
INSERT INTO people 
VALUES 
    (1,'grandfather', null),
    (2,'father', 1),
    (3,'child1', 2),
    (4,'child2', 2),
    (5,'other person non connected to the hierarchy', null);

WITH RECURSIVE x AS (
    -- base case starting from grandfather
   SELECT
      id,
      parent_id,
      name
   FROM
      people
   WHERE
      id =1
   UNION 
   
    --- recursive query (adds to the partial table "x")
    
    SELECT
        p.id,
        p.parent_id,
        p.name
    FROM
        people p
    INNER JOIN x x1 
        ON p.parent_id = x1.id 
) SELECT
   *
FROM
   x ;

```

My Table

```

CREATE TABLE course_prerequisites (
    course_id INTEGER REFERENCES courses(course_id),
    prerequisite_course_id INTEGER REFERENCES courses(course_id),
    PRIMARY KEY (course_id, prerequisite_course_id)
);
INSERT INTO course_prerequisites (course_id, prerequisite_course_id) VALUES
(101, 100),  -- Course 101 requires Course 100
(102, 100),  -- Course 102 requires Course 100
(103, 101),  -- Course 103 requires Course 101
(103, 102),  -- Course 103 also requires Course 102
(104, 103),  -- Course 104 requires Course 103
(105, 104);  -- Course 105 requires Course 104

WITH RECURSIVE course_hierarchy AS (
    -- Anchor member: Start with the specific course
    SELECT
        course_id,
        prerequisite_course_id
    FROM
        course_prerequisites
    WHERE
        course_id = 105  -- Example course to start with

    UNION ALL

    -- Recursive member: Find prerequisites of the prerequisites
    SELECT
        cp.course_id,
        cp.prerequisite_course_id
    FROM
        course_hierarchy ch
    JOIN
        course_prerequisites cp ON ch.prerequisite_course_id = cp.course_id
)
SELECT
    DISTINCT prerequisite_course_id AS course_id
FROM
    course_hierarchy;

```

